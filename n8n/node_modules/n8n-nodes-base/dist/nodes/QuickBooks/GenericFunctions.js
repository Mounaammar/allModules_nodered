"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateFields = exports.processLines = exports.loadResource = exports.handleBinaryData = exports.getRefAndSyncToken = exports.getSyncToken = exports.handleListing = exports.quickBooksApiRequestAllItems = exports.quickBooksApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const change_case_1 = require("change-case");
const lodash_1 = require("lodash");
async function quickBooksApiRequest(method, endpoint, qs, body, option = {}) {
    const resource = this.getNodeParameter('resource', 0);
    const operation = this.getNodeParameter('operation', 0);
    let isDownload = false;
    if (['estimate', 'invoice', 'payment'].includes(resource) && operation === 'get') {
        isDownload = this.getNodeParameter('download', 0);
    }
    const productionUrl = 'https://quickbooks.api.intuit.com';
    const sandboxUrl = 'https://sandbox-quickbooks.api.intuit.com';
    const credentials = this.getCredentials('quickBooksOAuth2Api');
    const options = {
        headers: {
            'user-agent': 'n8n',
        },
        method,
        uri: `${credentials.environment === 'sandbox' ? sandboxUrl : productionUrl}${endpoint}`,
        qs,
        body,
        json: !isDownload,
    };
    if (!Object.keys(body).length) {
        delete options.body;
    }
    if (!Object.keys(qs).length) {
        delete options.qs;
    }
    if (Object.keys(option)) {
        Object.assign(options, option);
    }
    if (isDownload) {
        options.headers['Accept'] = 'application/pdf';
    }
    if (resource === 'invoice' && operation === 'send') {
        options.headers['Content-Type'] = 'application/octet-stream';
    }
    if ((resource === 'invoice' && (operation === 'void' || operation === 'delete')) ||
        (resource === 'payment' && (operation === 'void' || operation === 'delete'))) {
        options.headers['Content-Type'] = 'application/json';
    }
    try {
        return await this.helpers.requestOAuth2.call(this, 'quickBooksOAuth2Api', options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.quickBooksApiRequest = quickBooksApiRequest;
async function quickBooksApiRequestAllItems(method, endpoint, qs, body, resource) {
    let responseData;
    let startPosition = 1;
    const maxResults = 1000;
    const returnData = [];
    const maxCount = await getCount.call(this, method, endpoint, qs);
    const originalQuery = qs.query;
    do {
        qs.query = `${originalQuery} MAXRESULTS ${maxResults} STARTPOSITION ${startPosition}`;
        responseData = await quickBooksApiRequest.call(this, method, endpoint, qs, body);
        returnData.push(...responseData.QueryResponse[change_case_1.capitalCase(resource)]);
        startPosition += maxResults;
    } while (maxCount > returnData.length);
    return returnData;
}
exports.quickBooksApiRequestAllItems = quickBooksApiRequestAllItems;
async function getCount(method, endpoint, qs) {
    const responseData = await quickBooksApiRequest.call(this, method, endpoint, qs, {});
    return responseData.QueryResponse.totalCount;
}
async function handleListing(i, endpoint, resource) {
    let responseData;
    const qs = {
        query: `SELECT * FROM ${resource}`,
    };
    const returnAll = this.getNodeParameter('returnAll', i);
    const filters = this.getNodeParameter('filters', i);
    if (filters.query) {
        qs.query += ` ${filters.query}`;
    }
    if (returnAll) {
        return await quickBooksApiRequestAllItems.call(this, 'GET', endpoint, qs, {}, resource);
    }
    else {
        const limit = this.getNodeParameter('limit', i);
        qs.query += ` MAXRESULTS ${limit}`;
        responseData = await quickBooksApiRequest.call(this, 'GET', endpoint, qs, {});
        responseData = responseData.QueryResponse[change_case_1.capitalCase(resource)];
        return responseData;
    }
}
exports.handleListing = handleListing;
async function getSyncToken(i, companyId, resource) {
    const resourceId = this.getNodeParameter(`${resource}Id`, i);
    const getEndpoint = `/v3/company/${companyId}/${resource}/${resourceId}`;
    const propertyName = change_case_1.capitalCase(resource);
    const { [propertyName]: { SyncToken } } = await quickBooksApiRequest.call(this, 'GET', getEndpoint, {}, {});
    return SyncToken;
}
exports.getSyncToken = getSyncToken;
async function getRefAndSyncToken(i, companyId, resource, ref) {
    const resourceId = this.getNodeParameter(`${resource}Id`, i);
    const endpoint = `/v3/company/${companyId}/${resource}/${resourceId}`;
    const responseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});
    return {
        ref: responseData[change_case_1.capitalCase(resource)][ref],
        syncToken: responseData[change_case_1.capitalCase(resource)].SyncToken,
    };
}
exports.getRefAndSyncToken = getRefAndSyncToken;
async function handleBinaryData(items, i, companyId, resource, resourceId) {
    var _a;
    const binaryProperty = this.getNodeParameter('binaryProperty', i);
    const fileName = this.getNodeParameter('fileName', i);
    const endpoint = `/v3/company/${companyId}/${resource}/${resourceId}/pdf`;
    const data = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {}, { encoding: null });
    items[i].binary = (_a = items[i].binary) !== null && _a !== void 0 ? _a : {};
    items[i].binary[binaryProperty] = await this.helpers.prepareBinaryData(data);
    items[i].binary[binaryProperty].fileName = fileName;
    items[i].binary[binaryProperty].fileExtension = 'pdf';
    return items;
}
exports.handleBinaryData = handleBinaryData;
async function loadResource(resource) {
    const returnData = [];
    const qs = {
        query: `SELECT * FROM ${resource}`,
    };
    const { oauthTokenData: { callbackQueryString: { realmId } } } = this.getCredentials('quickBooksOAuth2Api');
    const endpoint = `/v3/company/${realmId}/query`;
    const resourceItems = await quickBooksApiRequestAllItems.call(this, 'GET', endpoint, qs, {}, resource);
    if (resource === 'preferences') {
        const { SalesFormsPrefs: { CustomField } } = resourceItems[0];
        const customFields = CustomField[1].CustomField;
        for (const customField of customFields) {
            const length = customField.Name.length;
            returnData.push({
                name: customField.StringValue,
                value: customField.Name.charAt(length - 1),
            });
        }
        return returnData;
    }
    resourceItems.forEach((resourceItem) => {
        returnData.push({
            name: resourceItem.DisplayName || resourceItem.Name,
            value: resourceItem.Id,
        });
    });
    return returnData;
}
exports.loadResource = loadResource;
function processLines(body, lines, resource) {
    lines.forEach((line) => {
        if (resource === 'bill') {
            if (line.DetailType === 'AccountBasedExpenseLineDetail') {
                line.AccountBasedExpenseLineDetail = {
                    AccountRef: {
                        value: line.accountId,
                    },
                };
                delete line.accountId;
            }
            else if (line.DetailType === 'ItemBasedExpenseLineDetail') {
                line.ItemBasedExpenseLineDetail = {
                    ItemRef: {
                        value: line.itemId,
                    },
                };
                delete line.itemId;
            }
        }
        else if (resource === 'estimate') {
            if (line.DetailType === 'SalesItemLineDetail') {
                line.SalesItemLineDetail = {
                    ItemRef: {
                        value: line.itemId,
                    },
                };
                delete line.itemId;
            }
        }
        else if (resource === 'invoice') {
            if (line.DetailType === 'SalesItemLineDetail') {
                line.SalesItemLineDetail = {
                    ItemRef: {
                        value: line.itemId,
                    },
                };
                delete line.itemId;
            }
        }
    });
    return lines;
}
exports.processLines = processLines;
function populateFields(body, fields, resource) {
    Object.entries(fields).forEach(([key, value]) => {
        if (resource === 'bill') {
            if (key.endsWith('Ref')) {
                const { details } = value;
                body[key] = {
                    name: details.name,
                    value: details.value,
                };
            }
            else {
                body[key] = value;
            }
        }
        else if (['customer', 'employee', 'vendor'].includes(resource)) {
            if (key === 'BillAddr') {
                const { details } = value;
                body.BillAddr = lodash_1.pickBy(details, detail => detail !== '');
            }
            else if (key === 'PrimaryEmailAddr') {
                body.PrimaryEmailAddr = {
                    Address: value,
                };
            }
            else if (key === 'PrimaryPhone') {
                body.PrimaryPhone = {
                    FreeFormNumber: value,
                };
            }
            else {
                body[key] = value;
            }
        }
        else if (resource === 'estimate' || resource === 'invoice') {
            if (key === 'BillAddr' || key === 'ShipAddr') {
                const { details } = value;
                body[key] = lodash_1.pickBy(details, detail => detail !== '');
            }
            else if (key === 'BillEmail') {
                body.BillEmail = {
                    Address: value,
                };
            }
            else if (key === 'CustomFields') {
                const { Field } = value;
                body.CustomField = Field;
                const length = body.CustomField.length;
                for (let i = 0; i < length; i++) {
                    body.CustomField[i]['Type'] = 'StringType';
                }
            }
            else if (key === 'CustomerMemo') {
                body.CustomerMemo = {
                    value,
                };
            }
            else if (key.endsWith('Ref')) {
                const { details } = value;
                body[key] = {
                    name: details.name,
                    value: details.value,
                };
            }
            else if (key === 'TotalTax') {
                body.TxnTaxDetail = {
                    TotalTax: value,
                };
            }
            else {
                body[key] = value;
            }
        }
        else if (resource === 'payment') {
            body[key] = value;
        }
    });
    return body;
}
exports.populateFields = populateFields;
//# sourceMappingURL=GenericFunctions.js.map