"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaigaTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class TaigaTrigger {
    constructor() {
        this.description = {
            displayName: 'Taiga Trigger',
            name: 'taigaTrigger',
            icon: 'file:taiga.png',
            group: ['trigger'],
            version: 1,
            subtitle: '={{"project:" + $parameter["projectSlug"]}}',
            description: 'Handle Taiga events via webhook',
            defaults: {
                name: 'Taiga Trigger',
                color: '#772244',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'taigaCloudApi',
                    displayOptions: {
                        show: {
                            version: [
                                'cloud',
                            ],
                        },
                    },
                    required: true,
                },
                {
                    name: 'taigaServerApi',
                    displayOptions: {
                        show: {
                            version: [
                                'server',
                            ],
                        },
                    },
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Taiga Version',
                    name: 'version',
                    type: 'options',
                    options: [
                        {
                            name: 'Cloud',
                            value: 'cloud',
                        },
                        {
                            name: 'Server (Self Hosted)',
                            value: 'server',
                        },
                    ],
                    default: 'cloud',
                },
                {
                    displayName: 'Project ID',
                    name: 'projectId',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getUserProjects',
                    },
                    default: '',
                    description: 'Project ID',
                    required: true,
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getUserProjects() {
                    const returnData = [];
                    const { id } = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/users/me');
                    const projects = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/projects', {}, { member: id });
                    for (const project of projects) {
                        const projectName = project.name;
                        const projectId = project.id;
                        returnData.push({
                            name: projectName,
                            value: projectId,
                        });
                    }
                    return returnData;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const endpoint = `/webhooks`;
                    const webhooks = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', endpoint);
                    for (const webhook of webhooks) {
                        if (webhook.url === webhookUrl) {
                            webhookData.webhookId = webhook.id;
                            webhookData.key = webhook.key;
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const version = this.getNodeParameter('version');
                    let credentials;
                    if (version === 'server') {
                        credentials = this.getCredentials('taigaServerApi');
                    }
                    else {
                        credentials = this.getCredentials('taigaCloudApi');
                    }
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const projectId = this.getNodeParameter('projectId');
                    const key = GenericFunctions_1.getAutomaticSecret(credentials);
                    const body = {
                        name: `n8n-webhook:${webhookUrl}`,
                        url: webhookUrl,
                        key,
                        project: projectId,
                    };
                    const { id } = await GenericFunctions_1.taigaApiRequest.call(this, 'POST', '/webhooks', body);
                    webhookData.webhookId = id;
                    webhookData.key = key;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    try {
                        await GenericFunctions_1.taigaApiRequest.call(this, 'DELETE', `/webhooks/${webhookData.webhookId}`);
                    }
                    catch (error) {
                        return false;
                    }
                    delete webhookData.webhookId;
                    delete webhookData.key;
                    return true;
                },
            },
        };
    }
    async webhook() {
        const req = this.getRequestObject();
        const bodyData = req.body;
        return {
            workflowData: [
                this.helpers.returnJsonArray(bodyData),
            ],
        };
    }
}
exports.TaigaTrigger = TaigaTrigger;
//# sourceMappingURL=TaigaTrigger.node.js.map