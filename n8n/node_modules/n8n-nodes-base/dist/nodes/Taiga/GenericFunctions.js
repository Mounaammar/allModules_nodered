"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAutomaticSecret = exports.taigaApiRequestAllItems = exports.taigaApiRequest = exports.getAuthorization = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const crypto_1 = require("crypto");
async function getAuthorization(credentials) {
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const { password, username } = credentials;
    const options = {
        headers: { 'Content-Type': 'application/json' },
        method: 'POST',
        body: {
            type: 'normal',
            password,
            username,
        },
        uri: (credentials.url) ? `${credentials.url}/api/v1/auth` : 'https://api.taiga.io/api/v1/auth',
        json: true,
    };
    try {
        const response = await this.helpers.request(options);
        return response.auth_token;
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.getAuthorization = getAuthorization;
async function taigaApiRequest(method, resource, body = {}, query = {}, uri, option = {}) {
    const version = this.getNodeParameter('version', 0, 'cloud');
    let credentials;
    if (version === 'server') {
        credentials = this.getCredentials('taigaServerApi');
    }
    else {
        credentials = this.getCredentials('taigaCloudApi');
    }
    const authToken = await getAuthorization.call(this, credentials);
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        auth: {
            bearer: authToken,
        },
        qs: query,
        method,
        body,
        uri: uri || (credentials.url) ? `${credentials.url}/api/v1${resource}` : `https://api.taiga.io/api/v1${resource}`,
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.taigaApiRequest = taigaApiRequest;
async function taigaApiRequestAllItems(method, resource, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    do {
        responseData = await taigaApiRequest.call(this, method, resource, body, query, uri, { resolveWithFullResponse: true });
        returnData.push.apply(returnData, responseData.body);
        uri = responseData.headers['x-pagination-next'];
        if (query.limit && returnData.length >= query.limit) {
            return returnData;
        }
    } while (responseData.headers['x-pagination-next'] !== undefined &&
        responseData.headers['x-pagination-next'] !== '');
    return returnData;
}
exports.taigaApiRequestAllItems = taigaApiRequestAllItems;
function getAutomaticSecret(credentials) {
    const data = `${credentials.username},${credentials.password}`;
    return crypto_1.createHash('md5').update(data).digest('hex');
}
exports.getAutomaticSecret = getAutomaticSecret;
//# sourceMappingURL=GenericFunctions.js.map