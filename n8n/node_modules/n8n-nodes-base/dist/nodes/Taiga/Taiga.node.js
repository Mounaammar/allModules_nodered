"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Taiga = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const IssueOperations_1 = require("./IssueOperations");
const issueOperationFields_1 = require("./issueOperationFields");
class Taiga {
    constructor() {
        this.description = {
            displayName: 'Taiga',
            name: 'taiga',
            icon: 'file:taiga.png',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Taiga API',
            defaults: {
                name: 'Taiga',
                color: '#772244',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'taigaCloudApi',
                    displayOptions: {
                        show: {
                            version: [
                                'cloud',
                            ],
                        },
                    },
                    required: true,
                },
                {
                    name: 'taigaServerApi',
                    displayOptions: {
                        show: {
                            version: [
                                'server',
                            ],
                        },
                    },
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Taiga Version',
                    name: 'version',
                    type: 'options',
                    options: [
                        {
                            name: 'Cloud',
                            value: 'cloud',
                        },
                        {
                            name: 'Server (Self Hosted)',
                            value: 'server',
                        },
                    ],
                    default: 'cloud',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Issue',
                            value: 'issue',
                        },
                    ],
                    default: 'issue',
                    description: 'Resource to consume.',
                },
                ...IssueOperations_1.issueOperations,
                ...issueOperationFields_1.issueOperationFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getTypes() {
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const returnData = [];
                    const types = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', `/issue-types?project=${projectId}`);
                    for (const type of types) {
                        const typeName = type.name;
                        const typeId = type.id;
                        returnData.push({
                            name: typeName,
                            value: typeId,
                        });
                    }
                    return returnData;
                },
                async getStatuses() {
                    const returnData = [];
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const statuses = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/issue-statuses', {}, { project: projectId });
                    for (const status of statuses) {
                        const statusName = status.name;
                        const statusId = status.id;
                        returnData.push({
                            name: statusName,
                            value: statusId,
                        });
                    }
                    return returnData;
                },
                async getProjectUsers() {
                    const returnData = [];
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const users = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/users', {}, { project: projectId });
                    for (const user of users) {
                        const userName = user.username;
                        const userId = user.id;
                        returnData.push({
                            name: userName,
                            value: userId,
                        });
                    }
                    return returnData;
                },
                async getProjectPriorities() {
                    const returnData = [];
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const priorities = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/priorities', {}, { project: projectId });
                    for (const priority of priorities) {
                        const priorityName = priority.name;
                        const priorityId = priority.id;
                        returnData.push({
                            name: priorityName,
                            value: priorityId,
                        });
                    }
                    return returnData;
                },
                async getProjectSeverities() {
                    const returnData = [];
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const severities = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/severities', {}, { project: projectId });
                    for (const severity of severities) {
                        const severityName = severity.name;
                        const severityId = severity.id;
                        returnData.push({
                            name: severityName,
                            value: severityId,
                        });
                    }
                    return returnData;
                },
                async getProjectMilestones() {
                    const returnData = [];
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const milestones = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/milestones', {}, { project: projectId });
                    for (const milestone of milestones) {
                        const milestoneName = milestone.name;
                        const milestoneId = milestone.id;
                        returnData.push({
                            name: milestoneName,
                            value: milestoneId,
                        });
                    }
                    return returnData;
                },
                async getUserProjects() {
                    const returnData = [];
                    const { id } = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/users/me');
                    const projects = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', '/projects', {}, { member: id });
                    for (const project of projects) {
                        const projectName = project.name;
                        const projectId = project.id;
                        returnData.push({
                            name: projectName,
                            value: projectId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        const qs = {};
        for (let i = 0; i < items.length; i++) {
            if (resource === 'issue') {
                if (operation === 'create') {
                    const projectId = this.getNodeParameter('projectId', i);
                    const subject = this.getNodeParameter('subject', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        project: projectId,
                        subject,
                    };
                    Object.assign(body, additionalFields);
                    if (body.tags) {
                        body.tags = body.tags.split(',');
                    }
                    responseData = await GenericFunctions_1.taigaApiRequest.call(this, 'POST', '/issues', body);
                }
                if (operation === 'update') {
                    const issueId = this.getNodeParameter('issueId', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    Object.assign(body, updateFields);
                    if (body.tags) {
                        body.tags = body.tags.split(',');
                    }
                    const { version } = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', `/issues/${issueId}`);
                    body.version = version;
                    responseData = await GenericFunctions_1.taigaApiRequest.call(this, 'PATCH', `/issues/${issueId}`, body);
                }
                if (operation === 'delete') {
                    const issueId = this.getNodeParameter('issueId', i);
                    responseData = await GenericFunctions_1.taigaApiRequest.call(this, 'DELETE', `/issues/${issueId}`);
                    responseData = { success: true };
                }
                if (operation === 'get') {
                    const issueId = this.getNodeParameter('issueId', i);
                    responseData = await GenericFunctions_1.taigaApiRequest.call(this, 'GET', `/issues/${issueId}`);
                }
                if (operation === 'getAll') {
                    const projectId = this.getNodeParameter('projectId', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    qs.project = projectId;
                    if (returnAll === true) {
                        responseData = await GenericFunctions_1.taigaApiRequestAllItems.call(this, 'GET', '/issues', {}, qs);
                    }
                    else {
                        qs.limit = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.taigaApiRequestAllItems.call(this, 'GET', '/issues', {}, qs);
                        responseData = responseData.splice(0, qs.limit);
                    }
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Taiga = Taiga;
//# sourceMappingURL=Taiga.node.js.map