"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zendesk = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const TicketDescription_1 = require("./TicketDescription");
const TicketFieldDescription_1 = require("./TicketFieldDescription");
const UserDescription_1 = require("./UserDescription");
class Zendesk {
    constructor() {
        this.description = {
            displayName: 'Zendesk',
            name: 'zendesk',
            icon: 'file:zendesk.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Zendesk API',
            defaults: {
                name: 'Zendesk',
                color: '#13353c',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'zendeskApi',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'apiToken',
                            ],
                        },
                    },
                },
                {
                    name: 'zendeskOAuth2Api',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'oAuth2',
                            ],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'API Token',
                            value: 'apiToken',
                        },
                        {
                            name: 'OAuth2',
                            value: 'oAuth2',
                        },
                    ],
                    default: 'apiToken',
                    description: 'The resource to operate on.',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Ticket',
                            value: 'ticket',
                            description: 'Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support.',
                        },
                        {
                            name: 'Ticket Field',
                            value: 'ticketField',
                            description: 'Manage system and custom ticket fields',
                        },
                        {
                            name: 'User',
                            value: 'user',
                            description: 'Manage users',
                        },
                    ],
                    default: 'ticket',
                    description: 'Resource to consume.',
                },
                ...TicketDescription_1.ticketOperations,
                ...TicketDescription_1.ticketFields,
                ...TicketFieldDescription_1.ticketFieldOperations,
                ...TicketFieldDescription_1.ticketFieldFields,
                ...UserDescription_1.userOperations,
                ...UserDescription_1.userFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getCustomFields() {
                    const returnData = [];
                    const customFields = [
                        'text',
                        'textarea',
                        'date',
                        'integer',
                        'decimal',
                        'regexp',
                        'multiselect',
                        'tagger',
                    ];
                    const fields = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'ticket_fields', 'GET', '/ticket_fields');
                    for (const field of fields) {
                        if (customFields.includes(field.type)) {
                            const fieldName = field.title;
                            const fieldId = field.id;
                            returnData.push({
                                name: fieldName,
                                value: fieldId,
                            });
                        }
                    }
                    return returnData;
                },
                async getGroups() {
                    const returnData = [];
                    const groups = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'groups', 'GET', '/groups');
                    for (const group of groups) {
                        const groupName = group.name;
                        const groupId = group.id;
                        returnData.push({
                            name: groupName,
                            value: groupId,
                        });
                    }
                    return returnData;
                },
                async getTags() {
                    const returnData = [];
                    const tags = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'tags', 'GET', '/tags');
                    for (const tag of tags) {
                        const tagName = tag.name;
                        const tagId = tag.name;
                        returnData.push({
                            name: tagName,
                            value: tagId,
                        });
                    }
                    return returnData;
                },
                async getLocales() {
                    const returnData = [];
                    const locales = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'locales', 'GET', '/locales');
                    for (const locale of locales) {
                        const localeName = `${locale.locale} - ${locale.name}`;
                        const localeId = locale.locale;
                        returnData.push({
                            name: localeName,
                            value: localeId,
                        });
                    }
                    return returnData;
                },
                async getUserFields() {
                    const returnData = [];
                    const fields = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'user_fields', 'GET', '/user_fields');
                    for (const field of fields) {
                        const fieldName = field.title;
                        const fieldId = field.key;
                        returnData.push({
                            name: fieldName,
                            value: fieldId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        for (let i = 0; i < length; i++) {
            const resource = this.getNodeParameter('resource', 0);
            const operation = this.getNodeParameter('operation', 0);
            if (resource === 'ticket') {
                if (operation === 'create') {
                    const description = this.getNodeParameter('description', i);
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const comment = {
                        body: description,
                    };
                    const body = {
                        comment,
                    };
                    if (jsonParameters) {
                        const additionalFieldsJson = this.getNodeParameter('additionalFieldsJson', i);
                        if (additionalFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(additionalFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(additionalFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be a valid JSON');
                            }
                        }
                    }
                    else {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.type) {
                            body.type = additionalFields.type;
                        }
                        if (additionalFields.externalId) {
                            body.external_id = additionalFields.externalId;
                        }
                        if (additionalFields.subject) {
                            body.subject = additionalFields.subject;
                        }
                        if (additionalFields.status) {
                            body.status = additionalFields.status;
                        }
                        if (additionalFields.recipient) {
                            body.recipient = additionalFields.recipient;
                        }
                        if (additionalFields.group) {
                            body.group = additionalFields.group;
                        }
                        if (additionalFields.tags) {
                            body.tags = additionalFields.tags;
                        }
                        if (additionalFields.customFieldsUi) {
                            body.custom_fields = additionalFields.customFieldsUi.customFieldsValues;
                        }
                    }
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'POST', '/tickets', { ticket: body });
                    responseData = responseData.ticket;
                }
                if (operation === 'update') {
                    const ticketId = this.getNodeParameter('id', i);
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const body = {};
                    if (jsonParameters) {
                        const updateFieldsJson = this.getNodeParameter('updateFieldsJson', i);
                        if (updateFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(updateFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(updateFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be a valid JSON');
                            }
                        }
                    }
                    else {
                        const updateFields = this.getNodeParameter('updateFields', i);
                        if (updateFields.type) {
                            body.type = updateFields.type;
                        }
                        if (updateFields.externalId) {
                            body.external_id = updateFields.externalId;
                        }
                        if (updateFields.subject) {
                            body.subject = updateFields.subject;
                        }
                        if (updateFields.status) {
                            body.status = updateFields.status;
                        }
                        if (updateFields.recipient) {
                            body.recipient = updateFields.recipient;
                        }
                        if (updateFields.group) {
                            body.group = updateFields.group;
                        }
                        if (updateFields.tags) {
                            body.tags = updateFields.tags;
                        }
                        if (updateFields.customFieldsUi) {
                            body.custom_fields = updateFields.customFieldsUi.customFieldsValues;
                        }
                    }
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'PUT', `/tickets/${ticketId}`, { ticket: body });
                    responseData = responseData.ticket;
                }
                if (operation === 'get') {
                    const ticketId = this.getNodeParameter('id', i);
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/tickets/${ticketId}`, {});
                    responseData = responseData.ticket;
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    qs.query = 'type:ticket';
                    if (options.status) {
                        qs.query += ` status:${options.status}`;
                    }
                    if (options.sortBy) {
                        qs.sort_by = options.sortBy;
                    }
                    if (options.sortOrder) {
                        qs.sort_order = options.sortOrder;
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'results', 'GET', `/search`, {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.per_page = limit;
                        responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/search`, {}, qs);
                        responseData = responseData.results;
                    }
                }
                if (operation === 'delete') {
                    const ticketId = this.getNodeParameter('id', i);
                    try {
                        responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'DELETE', `/tickets/${ticketId}`, {});
                    }
                    catch (error) {
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                    }
                }
            }
            if (resource === 'ticketField') {
                if (operation === 'get') {
                    const ticketFieldId = this.getNodeParameter('ticketFieldId', i);
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/ticket_fields/${ticketFieldId}`, {});
                    responseData = responseData.ticket_field;
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'ticket_fields', 'GET', '/ticket_fields', {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.limit = limit;
                        responseData = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'ticket_fields', 'GET', '/ticket_fields', {}, qs);
                        responseData = responseData.slice(0, limit);
                    }
                }
            }
            if (resource === 'user') {
                if (operation === 'create') {
                    const name = this.getNodeParameter('name', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        name,
                    };
                    Object.assign(body, additionalFields);
                    if (body.userFieldsUi) {
                        const userFields = body.userFieldsUi.userFieldValues;
                        if (userFields) {
                            body.user_fields = {};
                            for (const userField of userFields) {
                                body.user_fields[userField.field] = userField.value;
                            }
                            delete body.userFieldsUi;
                        }
                    }
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'POST', '/users', { user: body });
                    responseData = responseData.user;
                }
                if (operation === 'update') {
                    const userId = this.getNodeParameter('id', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    Object.assign(body, updateFields);
                    if (body.userFieldsUi) {
                        const userFields = body.userFieldsUi.userFieldValues;
                        if (userFields) {
                            body.user_fields = {};
                            for (const userField of userFields) {
                                body.user_fields[userField.field] = userField.value;
                            }
                            delete body.userFieldsUi;
                        }
                    }
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'PUT', `/users/${userId}`, { user: body });
                    responseData = responseData.user;
                }
                if (operation === 'get') {
                    const userId = this.getNodeParameter('id', i);
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/users/${userId}`, {});
                    responseData = responseData.user;
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('filters', i);
                    Object.assign(qs, options);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'users', 'GET', `/users`, {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.per_page = limit;
                        responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/users`, {}, qs);
                        responseData = responseData.users;
                    }
                }
                if (operation === 'search') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('filters', i);
                    Object.assign(qs, options);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.zendeskApiRequestAllItems.call(this, 'users', 'GET', `/users/search`, {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.per_page = limit;
                        responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'GET', `/users/search`, {}, qs);
                        responseData = responseData.users;
                    }
                }
                if (operation === 'delete') {
                    const userId = this.getNodeParameter('id', i);
                    responseData = await GenericFunctions_1.zendeskApiRequest.call(this, 'DELETE', `/users/${userId}`, {});
                    responseData = responseData.user;
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Zendesk = Zendesk;
//# sourceMappingURL=Zendesk.node.js.map