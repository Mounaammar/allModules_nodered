"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareRangeQuery = exports.prepareSortQuery = exports.prepareOptional = exports.splitTags = exports.mapResource = exports.theHiveApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment = require("moment");
async function theHiveApiRequest(method, resource, body = {}, query = {}, uri, option = {}) {
    const credentials = this.getCredentials('theHiveApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const headerWithAuthentication = Object.assign({}, { Authorization: `Bearer ${credentials.ApiKey}` });
    let options = {
        headers: headerWithAuthentication,
        method,
        qs: query,
        uri: uri || `${credentials.url}/api${resource}`,
        body,
        rejectUnauthorized: credentials.allowUnauthorizedCerts,
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        options = Object.assign({}, options, option);
    }
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(query).length === 0) {
        delete options.qs;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.theHiveApiRequest = theHiveApiRequest;
function mapResource(resource) {
    switch (resource) {
        case 'alert':
            return 'alert';
        case 'case':
            return 'case';
        case 'observable':
            return 'case_artifact';
        case 'task':
            return 'case_task';
        case 'log':
            return 'case_task_log';
        default:
            return '';
    }
}
exports.mapResource = mapResource;
function splitTags(tags) {
    return tags.split(',').filter(tag => tag !== ' ' && tag);
}
exports.splitTags = splitTags;
function prepareOptional(optionals) {
    const response = {};
    for (const key in optionals) {
        if (optionals[key] !== undefined && optionals[key] !== null && optionals[key] !== '') {
            if (moment(optionals[key], moment.ISO_8601).isValid()) {
                response[key] = Date.parse(optionals[key]);
            }
            else if (key === 'artifacts') {
                response[key] = JSON.parse(optionals[key]);
            }
            else if (key === 'tags') {
                response[key] = splitTags(optionals[key]);
            }
            else {
                response[key] = optionals[key];
            }
        }
    }
    return response;
}
exports.prepareOptional = prepareOptional;
function prepareSortQuery(sort, body) {
    if (sort) {
        const field = sort.substring(1);
        const value = sort.charAt(0) === '+' ? 'asc' : 'desc';
        const sortOption = {};
        sortOption[field] = value;
        body.query.push({
            '_name': 'sort',
            '_fields': [
                sortOption,
            ],
        });
    }
}
exports.prepareSortQuery = prepareSortQuery;
function prepareRangeQuery(range, body) {
    if (range && range !== 'all') {
        body['query'].push({
            '_name': 'page',
            'from': parseInt(range.split('-')[0], 10),
            'to': parseInt(range.split('-')[1], 10),
        });
    }
}
exports.prepareRangeQuery = prepareRangeQuery;
//# sourceMappingURL=GenericFunctions.js.map