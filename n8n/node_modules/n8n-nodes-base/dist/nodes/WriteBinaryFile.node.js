"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteBinaryFile = void 0;
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const promises_1 = require("fs/promises");
class WriteBinaryFile {
    constructor() {
        this.description = {
            displayName: 'Write Binary File',
            name: 'writeBinaryFile',
            icon: 'fa:file-export',
            group: ['output'],
            version: 1,
            description: 'Writes a binary file to disk',
            defaults: {
                name: 'Write Binary File',
                color: '#CC2233',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'File Name',
                    name: 'fileName',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: '/data/example.jpg',
                    description: 'Path to which the file should be written.',
                },
                {
                    displayName: 'Property Name',
                    name: 'dataPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property which contains<br />the data for the file to be written.',
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let item;
        for (let itemIndex = 0; itemIndex < length; itemIndex++) {
            const dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);
            const fileName = this.getNodeParameter('fileName', itemIndex);
            item = items[itemIndex];
            if (item.binary === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data set. So file can not be written!');
            }
            if (item.binary[dataPropertyName] === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The binary property "${dataPropertyName}" does not exist. So no file can be written!`);
            }
            await promises_1.writeFile(fileName, Buffer.from(item.binary[dataPropertyName].data, n8n_core_1.BINARY_ENCODING), 'binary');
            const newItem = {
                json: {},
            };
            Object.assign(newItem.json, item.json);
            if (item.binary !== undefined) {
                newItem.binary = {};
                Object.assign(newItem.binary, item.binary);
            }
            newItem.json.fileName = fileName;
            returnData.push(newItem);
        }
        return this.prepareOutputData(returnData);
    }
}
exports.WriteBinaryFile = WriteBinaryFile;
//# sourceMappingURL=WriteBinaryFile.node.js.map