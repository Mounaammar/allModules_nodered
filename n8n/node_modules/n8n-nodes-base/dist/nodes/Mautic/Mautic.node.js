"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mautic = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const ContactDescription_1 = require("./ContactDescription");
const CompanyDescription_1 = require("./CompanyDescription");
const ContactCompanyDescription_1 = require("./ContactCompanyDescription");
const change_case_1 = require("change-case");
class Mautic {
    constructor() {
        this.description = {
            displayName: 'Mautic',
            name: 'mautic',
            icon: 'file:mautic.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Mautic API',
            defaults: {
                name: 'Mautic',
                color: '#52619b',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'mauticApi',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'credentials',
                            ],
                        },
                    },
                },
                {
                    name: 'mauticOAuth2Api',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'oAuth2',
                            ],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'Credentials',
                            value: 'credentials',
                        },
                        {
                            name: 'OAuth2',
                            value: 'oAuth2',
                        },
                    ],
                    default: 'credentials',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Company',
                            value: 'company',
                            description: 'Create or modify a company',
                        },
                        {
                            name: 'Contact',
                            value: 'contact',
                            description: 'Create & modify contacts',
                        },
                        {
                            name: 'Contact <> Company',
                            value: 'contactCompany',
                            description: 'Add/ remove contacts from a company',
                        },
                    ],
                    default: 'contact',
                    description: 'Resource to consume.',
                },
                ...CompanyDescription_1.companyOperations,
                ...CompanyDescription_1.companyFields,
                ...ContactDescription_1.contactOperations,
                ...ContactDescription_1.contactFields,
                ...ContactCompanyDescription_1.contactCompanyOperations,
                ...ContactCompanyDescription_1.contactCompanyFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getCompanies() {
                    const returnData = [];
                    const companies = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'companies', 'GET', '/companies');
                    for (const company of companies) {
                        returnData.push({
                            name: company.fields.all.companyname,
                            value: company.fields.all.companyname,
                        });
                    }
                    return returnData;
                },
                async getTags() {
                    const returnData = [];
                    const tags = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'tags', 'GET', '/tags');
                    for (const tag of tags) {
                        returnData.push({
                            name: tag.tag,
                            value: tag.tag,
                        });
                    }
                    return returnData;
                },
                async getStages() {
                    const returnData = [];
                    const stages = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'stages', 'GET', '/stages');
                    for (const stage of stages) {
                        returnData.push({
                            name: stage.name,
                            value: stage.id,
                        });
                    }
                    return returnData;
                },
                async getCompanyFields() {
                    const returnData = [];
                    const fields = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'fields', 'GET', '/fields/company');
                    for (const field of fields) {
                        returnData.push({
                            name: field.label,
                            value: field.alias,
                        });
                    }
                    return returnData;
                },
                async getContactFields() {
                    const returnData = [];
                    const fields = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'fields', 'GET', '/fields/contact');
                    for (const field of fields) {
                        returnData.push({
                            name: field.label,
                            value: field.alias,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let qs;
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            qs = {};
            if (resource === 'company') {
                if (operation === 'create') {
                    const name = this.getNodeParameter('name', i);
                    const simple = this.getNodeParameter('simple', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        companyname: name,
                    };
                    Object.assign(body, additionalFields);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'POST', '/companies/new', body);
                    responseData = responseData.company;
                    if (simple === true) {
                        responseData = responseData.fields.all;
                    }
                }
                if (operation === 'update') {
                    const companyId = this.getNodeParameter('companyId', i);
                    const simple = this.getNodeParameter('simple', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    Object.assign(body, updateFields);
                    if (body.name) {
                        body.companyname = body.name;
                        delete body.name;
                    }
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'PATCH', `/companies/${companyId}/edit`, body);
                    responseData = responseData.company;
                    if (simple === true) {
                        responseData = responseData.fields.all;
                    }
                }
                if (operation === 'get') {
                    const companyId = this.getNodeParameter('companyId', i);
                    const simple = this.getNodeParameter('simple', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'GET', `/companies/${companyId}`);
                    responseData = responseData.company;
                    if (simple === true) {
                        responseData = responseData.fields.all;
                    }
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const simple = this.getNodeParameter('simple', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    qs = Object.assign(qs, additionalFields);
                    if (returnAll === true) {
                        responseData = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'companies', 'GET', '/companies', {}, qs);
                    }
                    else {
                        qs.limit = this.getNodeParameter('limit', i);
                        qs.start = 0;
                        responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'GET', '/companies', {}, qs);
                        if (responseData.errors) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), responseData);
                        }
                        responseData = responseData.companies;
                        responseData = Object.values(responseData);
                    }
                    if (simple === true) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
                if (operation === 'delete') {
                    const simple = this.getNodeParameter('simple', i);
                    const companyId = this.getNodeParameter('companyId', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'DELETE', `/companies/${companyId}/delete`);
                    responseData = responseData.company;
                    if (simple === true) {
                        responseData = responseData.fields.all;
                    }
                }
            }
            if (resource === 'contact') {
                if (operation === 'create') {
                    const options = this.getNodeParameter('options', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const jsonActive = this.getNodeParameter('jsonParameters', i);
                    let body = {};
                    if (!jsonActive) {
                        body.email = this.getNodeParameter('email', i);
                        body.firstname = this.getNodeParameter('firstName', i);
                        body.lastname = this.getNodeParameter('lastName', i);
                        body.company = this.getNodeParameter('company', i);
                        body.position = this.getNodeParameter('position', i);
                        body.title = this.getNodeParameter('title', i);
                    }
                    else {
                        const json = GenericFunctions_1.validateJSON(this.getNodeParameter('bodyJson', i));
                        if (json !== undefined) {
                            body = Object.assign({}, json);
                        }
                        else {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Invalid JSON');
                        }
                    }
                    if (additionalFields.ipAddress) {
                        body.ipAddress = additionalFields.ipAddress;
                    }
                    if (additionalFields.lastActive) {
                        body.lastActive = additionalFields.lastActive;
                    }
                    if (additionalFields.ownerId) {
                        body.ownerId = additionalFields.ownerId;
                    }
                    if (additionalFields.addressUi) {
                        const addressValues = additionalFields.addressUi.addressValues;
                        if (addressValues) {
                            body.address1 = addressValues.address1;
                            body.address2 = addressValues.address2;
                            body.city = addressValues.city;
                            body.state = addressValues.state;
                            body.country = addressValues.country;
                            body.zipcode = addressValues.zipCode;
                        }
                    }
                    if (additionalFields.socialMediaUi) {
                        const socialMediaValues = additionalFields.socialMediaUi.socialMediaValues;
                        if (socialMediaValues) {
                            body.facebook = socialMediaValues.facebook;
                            body.foursquare = socialMediaValues.foursquare;
                            body.instagram = socialMediaValues.instagram;
                            body.linkedin = socialMediaValues.linkedIn;
                            body.skype = socialMediaValues.skype;
                            body.twitter = socialMediaValues.twitter;
                        }
                    }
                    if (additionalFields.customFieldsUi) {
                        const customFields = additionalFields.customFieldsUi.customFieldValues;
                        if (customFields) {
                            const data = customFields.reduce((obj, value) => Object.assign(obj, { [`${value.fieldId}`]: value.fieldValue }), {});
                            Object.assign(body, data);
                        }
                    }
                    if (additionalFields.b2bOrb2c) {
                        body.b2b_or_b2c = additionalFields.b2bOrb2c;
                    }
                    if (additionalFields.crmId) {
                        body.crm_id = additionalFields.crmId;
                    }
                    if (additionalFields.fax) {
                        body.fax = additionalFields.fax;
                    }
                    if (additionalFields.hasPurchased) {
                        body.haspurchased = additionalFields.hasPurchased;
                    }
                    if (additionalFields.mobile) {
                        body.mobile = additionalFields.mobile;
                    }
                    if (additionalFields.phone) {
                        body.phone = additionalFields.phone;
                    }
                    if (additionalFields.prospectOrCustomer) {
                        body.prospect_or_customer = additionalFields.prospectOrCustomer;
                    }
                    if (additionalFields.sandbox) {
                        body.sandbox = additionalFields.sandbox;
                    }
                    if (additionalFields.stage) {
                        body.stage = additionalFields.stage;
                    }
                    if (additionalFields.tags) {
                        body.tags = additionalFields.tags;
                    }
                    if (additionalFields.website) {
                        body.website = additionalFields.website;
                    }
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'POST', '/contacts/new', body);
                    responseData = [responseData.contact];
                    if (options.rawData === false) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
                if (operation === 'update') {
                    const options = this.getNodeParameter('options', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const contactId = this.getNodeParameter('contactId', i);
                    let body = {};
                    if (updateFields.email) {
                        body.email = updateFields.email;
                    }
                    if (updateFields.firstName) {
                        body.firstname = updateFields.firstName;
                    }
                    if (updateFields.lastName) {
                        body.lastname = updateFields.lastName;
                    }
                    if (updateFields.company) {
                        body.company = updateFields.company;
                    }
                    if (updateFields.position) {
                        body.position = updateFields.position;
                    }
                    if (updateFields.title) {
                        body.title = updateFields.title;
                    }
                    if (updateFields.bodyJson) {
                        const json = GenericFunctions_1.validateJSON(updateFields.bodyJson);
                        if (json !== undefined) {
                            body = Object.assign({}, json);
                        }
                        else {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Invalid JSON');
                        }
                    }
                    if (updateFields.ipAddress) {
                        body.ipAddress = updateFields.ipAddress;
                    }
                    if (updateFields.lastActive) {
                        body.lastActive = updateFields.lastActive;
                    }
                    if (updateFields.ownerId) {
                        body.ownerId = updateFields.ownerId;
                    }
                    if (updateFields.addressUi) {
                        const addressValues = updateFields.addressUi.addressValues;
                        if (addressValues) {
                            body.address1 = addressValues.address1;
                            body.address2 = addressValues.address2;
                            body.city = addressValues.city;
                            body.state = addressValues.state;
                            body.country = addressValues.country;
                            body.zipcode = addressValues.zipCode;
                        }
                    }
                    if (updateFields.socialMediaUi) {
                        const socialMediaValues = updateFields.socialMediaUi.socialMediaValues;
                        if (socialMediaValues) {
                            body.facebook = socialMediaValues.facebook;
                            body.foursquare = socialMediaValues.foursquare;
                            body.instagram = socialMediaValues.instagram;
                            body.linkedin = socialMediaValues.linkedIn;
                            body.skype = socialMediaValues.skype;
                            body.twitter = socialMediaValues.twitter;
                        }
                    }
                    if (updateFields.customFieldsUi) {
                        const customFields = updateFields.customFieldsUi.customFieldValues;
                        if (customFields) {
                            const data = customFields.reduce((obj, value) => Object.assign(obj, { [`${value.fieldId}`]: value.fieldValue }), {});
                            Object.assign(body, data);
                        }
                    }
                    if (updateFields.b2bOrb2c) {
                        body.b2b_or_b2c = updateFields.b2bOrb2c;
                    }
                    if (updateFields.crmId) {
                        body.crm_id = updateFields.crmId;
                    }
                    if (updateFields.fax) {
                        body.fax = updateFields.fax;
                    }
                    if (updateFields.hasPurchased) {
                        body.haspurchased = updateFields.hasPurchased;
                    }
                    if (updateFields.mobile) {
                        body.mobile = updateFields.mobile;
                    }
                    if (updateFields.phone) {
                        body.phone = updateFields.phone;
                    }
                    if (updateFields.prospectOrCustomer) {
                        body.prospect_or_customer = updateFields.prospectOrCustomer;
                    }
                    if (updateFields.sandbox) {
                        body.sandbox = updateFields.sandbox;
                    }
                    if (updateFields.stage) {
                        body.stage = updateFields.stage;
                    }
                    if (updateFields.tags) {
                        body.tags = updateFields.tags;
                    }
                    if (updateFields.website) {
                        body.website = updateFields.website;
                    }
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'PATCH', `/contacts/${contactId}/edit`, body);
                    responseData = [responseData.contact];
                    if (options.rawData === false) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
                if (operation === 'get') {
                    const options = this.getNodeParameter('options', i);
                    const contactId = this.getNodeParameter('contactId', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'GET', `/contacts/${contactId}`);
                    responseData = [responseData.contact];
                    if (options.rawData === false) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    qs = Object.assign(qs, options);
                    if (qs.orderBy) {
                        qs.orderBy = change_case_1.snakeCase(qs.orderBy);
                    }
                    if (returnAll === true) {
                        responseData = await GenericFunctions_1.mauticApiRequestAllItems.call(this, 'contacts', 'GET', '/contacts', {}, qs);
                    }
                    else {
                        qs.limit = this.getNodeParameter('limit', i);
                        qs.start = 0;
                        responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'GET', '/contacts', {}, qs);
                        if (responseData.errors) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), responseData);
                        }
                        responseData = responseData.contacts;
                        responseData = Object.values(responseData);
                    }
                    if (options.rawData === false) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
                if (operation === 'delete') {
                    const options = this.getNodeParameter('options', i);
                    const contactId = this.getNodeParameter('contactId', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'DELETE', `/contacts/${contactId}/delete`);
                    responseData = [responseData.contact];
                    if (options.rawData === false) {
                        responseData = responseData.map(item => item.fields.all);
                    }
                }
            }
            if (resource === 'contactCompany') {
                if (operation === 'add') {
                    const contactId = this.getNodeParameter('contactId', i);
                    const companyId = this.getNodeParameter('companyId', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'POST', `/companies/${companyId}/contact/${contactId}/add`, {});
                }
                if (operation === 'remove') {
                    const contactId = this.getNodeParameter('contactId', i);
                    const companyId = this.getNodeParameter('companyId', i);
                    responseData = await GenericFunctions_1.mauticApiRequest.call(this, 'POST', `/companies/${companyId}/contact/${contactId}/remove`, {});
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Mautic = Mautic;
//# sourceMappingURL=Mautic.node.js.map