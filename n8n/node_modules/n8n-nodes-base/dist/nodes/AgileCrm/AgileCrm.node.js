"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgileCrm = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const ContactDescription_1 = require("./ContactDescription");
const CompanyDescription_1 = require("./CompanyDescription");
const DealDescription_1 = require("./DealDescription");
const GenericFunctions_1 = require("./GenericFunctions");
class AgileCrm {
    constructor() {
        this.description = {
            displayName: 'Agile CRM',
            name: 'agileCrm',
            icon: 'file:agilecrm.png',
            group: ['transform'],
            version: 1,
            description: 'Consume Agile CRM API',
            defaults: {
                name: 'AgileCRM',
                color: '#772244',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'agileCrmApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Company',
                            value: 'company',
                        },
                        {
                            name: 'Contact',
                            value: 'contact',
                        },
                        {
                            name: 'Deal',
                            value: 'deal',
                        },
                    ],
                    default: 'contact',
                    description: 'Resource to consume.',
                },
                ...ContactDescription_1.contactOperations,
                ...ContactDescription_1.contactFields,
                ...CompanyDescription_1.companyOperations,
                ...CompanyDescription_1.companyFields,
                ...DealDescription_1.dealOperations,
                ...DealDescription_1.dealFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < items.length; i++) {
            if (resource === 'contact' || resource === 'company') {
                const idGetter = resource === 'contact' ? 'contactId' : 'companyId';
                if (operation === 'get') {
                    const contactId = this.getNodeParameter(idGetter, i);
                    const endpoint = `api/contacts/${contactId}`;
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                }
                else if (operation === 'delete') {
                    const contactId = this.getNodeParameter(idGetter, i);
                    const endpoint = `api/contacts/${contactId}`;
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'DELETE', endpoint, {});
                }
                else if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (resource === 'contact') {
                        if (returnAll) {
                            const endpoint = 'api/contacts';
                            responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                        }
                        else {
                            const limit = this.getNodeParameter('limit', i);
                            const endpoint = `api/contacts?page_size=${limit}`;
                            responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                        }
                    }
                    else {
                        if (returnAll) {
                            const endpoint = 'api/contacts/companies/list';
                            responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'POST', endpoint, {});
                        }
                        else {
                            const limit = this.getNodeParameter('limit', i);
                            const endpoint = `api/contacts/companies/list?page_size=${limit}`;
                            responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'POST', endpoint, {});
                        }
                    }
                }
                else if (operation === 'create') {
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const body = {};
                    const properties = [];
                    if (jsonParameters) {
                        const additionalFieldsJson = this.getNodeParameter('additionalFieldsJson', i);
                        if (additionalFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(additionalFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(additionalFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be a valid JSON');
                            }
                        }
                    }
                    else {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (resource === 'company') {
                            body.type = 'COMPANY';
                        }
                        if (additionalFields.starValue) {
                            body.star_value = additionalFields.starValue;
                        }
                        if (additionalFields.tags) {
                            body.tags = additionalFields.tags;
                        }
                        if (resource === 'contact') {
                            if (additionalFields.firstName) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'first_name',
                                    value: additionalFields.firstName,
                                });
                            }
                            if (additionalFields.lastName) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'last_name',
                                    value: additionalFields.lastName,
                                });
                            }
                            if (additionalFields.company) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'company',
                                    value: additionalFields.company,
                                });
                            }
                            if (additionalFields.title) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'title',
                                    value: additionalFields.title,
                                });
                            }
                            if (additionalFields.emailOptions) {
                                additionalFields.emailOptions.emailProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'email',
                                        value: property.email,
                                    });
                                });
                            }
                            if (additionalFields.addressOptions) {
                                additionalFields.addressOptions.addressProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'address',
                                        value: property.address,
                                    });
                                });
                            }
                            if (additionalFields.phoneOptions) {
                                additionalFields.phoneOptions.phoneProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'phone',
                                        value: property.number,
                                    });
                                });
                            }
                        }
                        else if (resource === 'company') {
                            if (additionalFields.email) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'email',
                                    value: additionalFields.email,
                                });
                            }
                            if (additionalFields.address) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'address',
                                    value: additionalFields.address,
                                });
                            }
                            if (additionalFields.phone) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'phone',
                                    value: additionalFields.phone,
                                });
                            }
                        }
                        if (additionalFields.websiteOptions) {
                            additionalFields.websiteOptions.websiteProperties.map(property => {
                                properties.push({
                                    type: 'SYSTEM',
                                    subtype: property.subtype,
                                    name: 'webiste',
                                    value: property.url,
                                });
                            });
                        }
                        if (additionalFields.customProperties) {
                            additionalFields.customProperties.customProperty.map(property => {
                                properties.push({
                                    type: 'CUSTOM',
                                    subtype: property.subtype,
                                    name: property.name,
                                    value: property.value,
                                });
                            });
                        }
                        body.properties = properties;
                    }
                    const endpoint = 'api/contacts';
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'POST', endpoint, body);
                }
                else if (operation === 'update') {
                    const contactId = this.getNodeParameter(idGetter, i);
                    const contactUpdatePayload = { id: contactId };
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const body = {};
                    const properties = [];
                    if (jsonParameters) {
                        const additionalFieldsJson = this.getNodeParameter('additionalFieldsJson', i);
                        if (additionalFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(additionalFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(additionalFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be a valid JSON');
                            }
                        }
                    }
                    else {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.starValue) {
                            body.star_value = additionalFields.starValue;
                        }
                        if (additionalFields.tags) {
                            body.tags = additionalFields.tags;
                        }
                        if (resource === 'contact') {
                            if (additionalFields.leadScore) {
                                body.lead_score = additionalFields.leadScore;
                            }
                            if (additionalFields.firstName) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'first_name',
                                    value: additionalFields.firstName,
                                });
                            }
                            if (additionalFields.lastName) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'last_name',
                                    value: additionalFields.lastName,
                                });
                            }
                            if (additionalFields.company) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'company',
                                    value: additionalFields.company,
                                });
                            }
                            if (additionalFields.title) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'title',
                                    value: additionalFields.title,
                                });
                            }
                            if (additionalFields.emailOptions) {
                                additionalFields.emailOptions.emailProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'email',
                                        value: property.email,
                                    });
                                });
                            }
                            if (additionalFields.addressOptions) {
                                additionalFields.addressOptions.addressProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'address',
                                        value: property.address,
                                    });
                                });
                            }
                            if (additionalFields.phoneOptions) {
                                additionalFields.phoneOptions.phoneProperties.map(property => {
                                    properties.push({
                                        type: 'SYSTEM',
                                        subtype: property.subtype,
                                        name: 'phone',
                                        value: property.number,
                                    });
                                });
                            }
                        }
                        else if (resource === 'company') {
                            if (additionalFields.email) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'email',
                                    value: additionalFields.email,
                                });
                            }
                            if (additionalFields.address) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'address',
                                    value: additionalFields.address,
                                });
                            }
                            if (additionalFields.phone) {
                                properties.push({
                                    type: 'SYSTEM',
                                    name: 'phone',
                                    value: additionalFields.phone,
                                });
                            }
                        }
                        if (additionalFields.websiteOptions) {
                            additionalFields.websiteOptions.websiteProperties.map(property => {
                                properties.push({
                                    type: 'SYSTEM',
                                    subtype: property.subtype,
                                    name: 'webiste',
                                    value: property.url,
                                });
                            });
                        }
                        if (additionalFields.customProperties) {
                            additionalFields.customProperties.customProperty.map(property => {
                                properties.push({
                                    type: 'CUSTOM',
                                    subtype: property.subtype,
                                    name: property.name,
                                    value: property.value,
                                });
                            });
                        }
                        body.properties = properties;
                    }
                    Object.assign(contactUpdatePayload, body);
                    responseData = await GenericFunctions_1.agileCrmApiRequestUpdate.call(this, 'PUT', '', contactUpdatePayload);
                }
            }
            else if (resource === 'deal') {
                if (operation === 'get') {
                    const dealId = this.getNodeParameter('dealId', i);
                    const endpoint = `api/opportunity/${dealId}`;
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                }
                else if (operation === 'delete') {
                    const contactId = this.getNodeParameter('dealId', i);
                    const endpoint = `api/opportunity/${contactId}`;
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'DELETE', endpoint, {});
                }
                else if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        const endpoint = 'api/opportunity';
                        responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        const endpoint = `api/opportunity?page_size=${limit}`;
                        responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'GET', endpoint, {});
                    }
                }
                else if (operation === 'create') {
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const body = {};
                    if (jsonParameters) {
                        const additionalFieldsJson = this.getNodeParameter('additionalFieldsJson', i);
                        if (additionalFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(additionalFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(additionalFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be a valid JSON');
                            }
                        }
                    }
                    else {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        body.close_date = new Date(this.getNodeParameter('closeDate', i)).getTime();
                        body.expected_value = this.getNodeParameter('expectedValue', i);
                        body.milestone = this.getNodeParameter('milestone', i);
                        body.probability = this.getNodeParameter('probability', i);
                        body.name = this.getNodeParameter('name', i);
                        if (additionalFields.contactIds) {
                            body.contactIds = additionalFields.contactIds;
                        }
                        if (additionalFields.customData) {
                            body.customData = additionalFields.customData.customProperty;
                        }
                    }
                    const endpoint = 'api/opportunity';
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'POST', endpoint, body);
                }
                else if (operation === 'update') {
                    const jsonParameters = this.getNodeParameter('jsonParameters', i);
                    const body = {};
                    if (jsonParameters) {
                        const additionalFieldsJson = this.getNodeParameter('additionalFieldsJson', i);
                        if (additionalFieldsJson !== '') {
                            if (GenericFunctions_1.validateJSON(additionalFieldsJson) !== undefined) {
                                Object.assign(body, JSON.parse(additionalFieldsJson));
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Additional fields must be valid JSON');
                            }
                        }
                    }
                    else {
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        body.id = this.getNodeParameter('dealId', i);
                        if (additionalFields.expectedValue) {
                            body.expected_value = additionalFields.expectedValue;
                        }
                        if (additionalFields.name) {
                            body.name = additionalFields.name;
                        }
                        if (additionalFields.probability) {
                            body.probability = additionalFields.probability;
                        }
                        if (additionalFields.contactIds) {
                            body.contactIds = additionalFields.contactIds;
                        }
                        if (additionalFields.customData) {
                            body.customData = additionalFields.customData.customProperty;
                        }
                    }
                    const endpoint = 'api/opportunity/partial-update';
                    responseData = await GenericFunctions_1.agileCrmApiRequest.call(this, 'PUT', endpoint, body);
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.AgileCrm = AgileCrm;
//# sourceMappingURL=AgileCrm.node.js.map