"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WooCommerce = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const ProductDescription_1 = require("./ProductDescription");
const OrderDescription_1 = require("./OrderDescription");
class WooCommerce {
    constructor() {
        this.description = {
            displayName: 'WooCommerce',
            name: 'wooCommerce',
            icon: 'file:wooCommerce.png',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume WooCommerce API',
            defaults: {
                name: 'WooCommerce',
                color: '#96588a',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'wooCommerceApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Order',
                            value: 'order',
                        },
                        {
                            name: 'Product',
                            value: 'product',
                        },
                    ],
                    default: 'product',
                    description: 'Resource to consume.',
                },
                ...ProductDescription_1.productOperations,
                ...ProductDescription_1.productFields,
                ...OrderDescription_1.orderOperations,
                ...OrderDescription_1.orderFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getCategories() {
                    const returnData = [];
                    const categories = await GenericFunctions_1.woocommerceApiRequestAllItems.call(this, 'GET', '/products/categories', {});
                    for (const category of categories) {
                        const categoryName = category.name;
                        const categoryId = category.id;
                        returnData.push({
                            name: categoryName,
                            value: categoryId,
                        });
                    }
                    return returnData;
                },
                async getTags() {
                    const returnData = [];
                    const tags = await GenericFunctions_1.woocommerceApiRequestAllItems.call(this, 'GET', '/products/tags', {});
                    for (const tag of tags) {
                        const tagName = tag.name;
                        const tagId = tag.id;
                        returnData.push({
                            name: tagName,
                            value: tagId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const qs = {};
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            if (resource === 'product') {
                if (operation === 'create') {
                    const name = this.getNodeParameter('name', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {
                        name,
                    };
                    if (additionalFields.backorders) {
                        body.backorders = additionalFields.backorders;
                    }
                    if (additionalFields.buttonText) {
                        body.button_text = additionalFields.buttonText;
                    }
                    if (additionalFields.catalogVisibility) {
                        body.catalog_visibility = additionalFields.catalogVisibility;
                    }
                    if (additionalFields.categories) {
                        body.categories = additionalFields.categories.map(category => ({ id: parseInt(category, 10) }));
                    }
                    if (additionalFields.crossSellIds) {
                        body.cross_sell_ids = additionalFields.crossSellIds.split(',');
                    }
                    if (additionalFields.dateOnSaleFrom) {
                        body.date_on_sale_from = additionalFields.dateOnSaleFrom;
                    }
                    if (additionalFields.dateOnSaleTo) {
                        body.date_on_sale_to = additionalFields.dateOnSaleTo;
                    }
                    if (additionalFields.description) {
                        body.description = additionalFields.description;
                    }
                    if (additionalFields.downloadable) {
                        body.downloadable = additionalFields.downloadable;
                    }
                    if (additionalFields.externalUrl) {
                        body.external_url = additionalFields.externalUrl;
                    }
                    if (additionalFields.featured) {
                        body.featured = additionalFields.featured;
                    }
                    if (additionalFields.manageStock) {
                        body.manage_stock = additionalFields.manageStock;
                    }
                    if (additionalFields.parentId) {
                        body.parent_id = additionalFields.parentId;
                    }
                    if (additionalFields.purchaseNote) {
                        body.purchase_note = additionalFields.purchaseNote;
                    }
                    if (additionalFields.regularPrice) {
                        body.regular_price = additionalFields.regularPrice;
                    }
                    if (additionalFields.reviewsAllowed) {
                        body.reviews_allowed = additionalFields.reviewsAllowed;
                    }
                    if (additionalFields.salePrice) {
                        body.sale_price = additionalFields.salePrice;
                    }
                    if (additionalFields.shippingClass) {
                        body.shipping_class = additionalFields.shippingClass;
                    }
                    if (additionalFields.shortDescription) {
                        body.short_description = additionalFields.shortDescription;
                    }
                    if (additionalFields.sku) {
                        body.sku = additionalFields.sku;
                    }
                    if (additionalFields.slug) {
                        body.slug = additionalFields.slug;
                    }
                    if (additionalFields.soldIndividually) {
                        body.sold_individually = additionalFields.soldIndividually;
                    }
                    if (additionalFields.status) {
                        body.status = additionalFields.status;
                    }
                    if (additionalFields.stockQuantity) {
                        body.stock_quantity = additionalFields.stockQuantity;
                    }
                    if (additionalFields.stockStatus) {
                        body.stock_status = additionalFields.stockStatus;
                    }
                    if (additionalFields.tags) {
                        body.tags = additionalFields.tags.map(tag => ({ 'id': parseInt(tag, 10) }));
                    }
                    if (additionalFields.taxClass) {
                        body.tax_class = additionalFields.taxClass;
                    }
                    if (additionalFields.taxStatus) {
                        body.tax_status = additionalFields.taxStatus;
                    }
                    if (additionalFields.type) {
                        body.type = additionalFields.type;
                    }
                    if (additionalFields.upsellIds) {
                        body.upsell_ids = additionalFields.upsellIds.split(',');
                    }
                    if (additionalFields.virtual) {
                        body.virtual = additionalFields.virtual;
                    }
                    if (additionalFields.weight) {
                        body.weight = additionalFields.weight;
                    }
                    const images = this.getNodeParameter('imagesUi', i).imagesValues;
                    if (images) {
                        body.images = images;
                    }
                    const dimension = this.getNodeParameter('dimensionsUi', i).dimensionsValues;
                    if (dimension) {
                        body.dimensions = dimension;
                    }
                    const metadata = this.getNodeParameter('metadataUi', i).metadataValues;
                    if (metadata) {
                        body.meta_data = metadata;
                    }
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'POST', '/products', body);
                }
                if (operation === 'update') {
                    const productId = this.getNodeParameter('productId', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    if (updateFields.name) {
                        body.name = updateFields.name;
                    }
                    if (updateFields.backorders) {
                        body.backorders = updateFields.backorders;
                    }
                    if (updateFields.buttonText) {
                        body.button_text = updateFields.buttonText;
                    }
                    if (updateFields.catalogVisibility) {
                        body.catalog_visibility = updateFields.catalogVisibility;
                    }
                    if (updateFields.categories) {
                        body.categories = updateFields.categories.map(category => ({ id: parseInt(category, 10) }));
                    }
                    if (updateFields.crossSellIds) {
                        body.cross_sell_ids = updateFields.crossSellIds.split(',');
                    }
                    if (updateFields.dateOnSaleFrom) {
                        body.date_on_sale_from = updateFields.dateOnSaleFrom;
                    }
                    if (updateFields.dateOnSaleTo) {
                        body.date_on_sale_to = updateFields.dateOnSaleTo;
                    }
                    if (updateFields.description) {
                        body.description = updateFields.description;
                    }
                    if (updateFields.downloadable) {
                        body.downloadable = updateFields.downloadable;
                    }
                    if (updateFields.externalUrl) {
                        body.external_url = updateFields.externalUrl;
                    }
                    if (updateFields.featured) {
                        body.featured = updateFields.featured;
                    }
                    if (updateFields.manageStock) {
                        body.manage_stock = updateFields.manageStock;
                    }
                    if (updateFields.parentId) {
                        body.parent_id = updateFields.parentId;
                    }
                    if (updateFields.purchaseNote) {
                        body.purchase_note = updateFields.purchaseNote;
                    }
                    if (updateFields.regularPrice) {
                        body.regular_price = updateFields.regularPrice;
                    }
                    if (updateFields.reviewsAllowed) {
                        body.reviews_allowed = updateFields.reviewsAllowed;
                    }
                    if (updateFields.salePrice) {
                        body.sale_price = updateFields.salePrice;
                    }
                    if (updateFields.shippingClass) {
                        body.shipping_class = updateFields.shippingClass;
                    }
                    if (updateFields.shortDescription) {
                        body.short_description = updateFields.shortDescription;
                    }
                    if (updateFields.sku) {
                        body.sku = updateFields.sku;
                    }
                    if (updateFields.slug) {
                        body.slug = updateFields.slug;
                    }
                    if (updateFields.soldIndividually) {
                        body.sold_individually = updateFields.soldIndividually;
                    }
                    if (updateFields.status) {
                        body.status = updateFields.status;
                    }
                    if (updateFields.stockQuantity) {
                        body.stock_quantity = updateFields.stockQuantity;
                    }
                    if (updateFields.stockStatus) {
                        body.stock_status = updateFields.stockStatus;
                    }
                    if (updateFields.tags) {
                        body.tags = updateFields.tags.map(tag => ({ id: parseInt(tag, 10) }));
                    }
                    if (updateFields.taxClass) {
                        body.tax_class = updateFields.taxClass;
                    }
                    if (updateFields.taxStatus) {
                        body.tax_status = updateFields.taxStatus;
                    }
                    if (updateFields.type) {
                        body.type = updateFields.type;
                    }
                    if (updateFields.upsellIds) {
                        body.upsell_ids = updateFields.upsellIds.split(',');
                    }
                    if (updateFields.virtual) {
                        body.virtual = updateFields.virtual;
                    }
                    if (updateFields.weight) {
                        body.weight = updateFields.weight;
                    }
                    const images = this.getNodeParameter('imagesUi', i).imagesValues;
                    if (images) {
                        body.images = images;
                    }
                    const dimension = this.getNodeParameter('dimensionsUi', i).dimensionsValues;
                    if (dimension) {
                        body.dimensions = dimension;
                    }
                    const metadata = this.getNodeParameter('metadataUi', i).metadataValues;
                    if (metadata) {
                        body.meta_data = metadata;
                    }
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'PUT', `/products/${productId}`, body);
                }
                if (operation === 'get') {
                    const productId = this.getNodeParameter('productId', i);
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'GET', `/products/${productId}`, {}, qs);
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    if (options.after) {
                        qs.after = options.after;
                    }
                    if (options.before) {
                        qs.before = options.before;
                    }
                    if (options.category) {
                        qs.category = options.category;
                    }
                    if (options.context) {
                        qs.context = options.context;
                    }
                    if (options.featured) {
                        qs.featured = options.featured;
                    }
                    if (options.maxPrice) {
                        qs.max_price = options.maxPrice;
                    }
                    if (options.minPrice) {
                        qs.max_price = options.minPrice;
                    }
                    if (options.order) {
                        qs.order = options.order;
                    }
                    if (options.orderBy) {
                        qs.orderby = options.orderBy;
                    }
                    if (options.search) {
                        qs.search = options.search;
                    }
                    if (options.sku) {
                        qs.sku = options.sku;
                    }
                    if (options.slug) {
                        qs.slug = options.slug;
                    }
                    if (options.status) {
                        qs.status = options.status;
                    }
                    if (options.stockStatus) {
                        qs.stock_status = options.stockStatus;
                    }
                    if (options.tag) {
                        qs.tag = options.tag;
                    }
                    if (options.taxClass) {
                        qs.tax_class = options.taxClass;
                    }
                    if (options.type) {
                        qs.type = options.type;
                    }
                    if (returnAll === true) {
                        responseData = await GenericFunctions_1.woocommerceApiRequestAllItems.call(this, 'GET', '/products', {}, qs);
                    }
                    else {
                        qs.per_page = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'GET', '/products', {}, qs);
                    }
                }
                if (operation === 'delete') {
                    const productId = this.getNodeParameter('productId', i);
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'DELETE', `/products/${productId}`, {}, { force: true });
                }
            }
            if (resource === 'order') {
                if (operation === 'create') {
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {};
                    if (additionalFields.currency) {
                        body.currency = additionalFields.currency;
                    }
                    if (additionalFields.customerId) {
                        body.customer_id = parseInt(additionalFields.customerId, 10);
                    }
                    if (additionalFields.customerNote) {
                        body.customer_note = additionalFields.customerNote;
                    }
                    if (additionalFields.parentId) {
                        body.parent_id = parseInt(additionalFields.parentId, 10);
                    }
                    if (additionalFields.paymentMethodId) {
                        body.payment_method = additionalFields.paymentMethodId;
                    }
                    if (additionalFields.paymentMethodTitle) {
                        body.payment_method_title = additionalFields.paymentMethodTitle;
                    }
                    if (additionalFields.setPaid) {
                        body.set_paid = additionalFields.setPaid;
                    }
                    if (additionalFields.status) {
                        body.status = additionalFields.status;
                    }
                    if (additionalFields.transactionID) {
                        body.transaction_id = additionalFields.transactionID;
                    }
                    const billing = this.getNodeParameter('billingUi', i).billingValues;
                    if (billing !== undefined) {
                        body.billing = billing;
                        GenericFunctions_1.toSnakeCase(billing);
                    }
                    const shipping = this.getNodeParameter('shippingUi', i).shippingValues;
                    if (shipping !== undefined) {
                        body.shipping = shipping;
                        GenericFunctions_1.toSnakeCase(shipping);
                    }
                    const couponLines = this.getNodeParameter('couponLinesUi', i).couponLinesValues;
                    if (couponLines) {
                        body.coupon_lines = couponLines;
                        GenericFunctions_1.setMetadata(couponLines);
                        GenericFunctions_1.toSnakeCase(couponLines);
                    }
                    const feeLines = this.getNodeParameter('feeLinesUi', i).feeLinesValues;
                    if (feeLines) {
                        body.fee_lines = feeLines;
                        GenericFunctions_1.setMetadata(feeLines);
                        GenericFunctions_1.toSnakeCase(feeLines);
                    }
                    const lineItems = this.getNodeParameter('lineItemsUi', i).lineItemsValues;
                    if (lineItems) {
                        body.line_items = lineItems;
                        GenericFunctions_1.setMetadata(lineItems);
                        GenericFunctions_1.toSnakeCase(lineItems);
                    }
                    const metadata = this.getNodeParameter('metadataUi', i).metadataValues;
                    if (metadata) {
                        body.meta_data = metadata;
                    }
                    const shippingLines = this.getNodeParameter('shippingLinesUi', i).shippingLinesValues;
                    if (shippingLines) {
                        body.shipping_lines = shippingLines;
                        GenericFunctions_1.setMetadata(shippingLines);
                        GenericFunctions_1.toSnakeCase(shippingLines);
                    }
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'POST', '/orders', body);
                }
                if (operation === 'update') {
                    const orderId = this.getNodeParameter('orderId', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    if (updateFields.currency) {
                        body.currency = updateFields.currency;
                    }
                    if (updateFields.customerId) {
                        body.customer_id = parseInt(updateFields.customerId, 10);
                    }
                    if (updateFields.customerNote) {
                        body.customer_note = updateFields.customerNote;
                    }
                    if (updateFields.parentId) {
                        body.parent_id = parseInt(updateFields.parentId, 10);
                    }
                    if (updateFields.paymentMethodId) {
                        body.payment_method = updateFields.paymentMethodId;
                    }
                    if (updateFields.paymentMethodTitle) {
                        body.payment_method_title = updateFields.paymentMethodTitle;
                    }
                    if (updateFields.status) {
                        body.status = updateFields.status;
                    }
                    if (updateFields.transactionID) {
                        body.transaction_id = updateFields.transactionID;
                    }
                    const billing = this.getNodeParameter('billingUi', i).billingValues;
                    if (billing !== undefined) {
                        body.billing = billing;
                        GenericFunctions_1.toSnakeCase(billing);
                    }
                    const shipping = this.getNodeParameter('shippingUi', i).shippingValues;
                    if (shipping !== undefined) {
                        body.shipping = shipping;
                        GenericFunctions_1.toSnakeCase(shipping);
                    }
                    const couponLines = this.getNodeParameter('couponLinesUi', i).couponLinesValues;
                    if (couponLines) {
                        body.coupon_lines = couponLines;
                        GenericFunctions_1.setMetadata(couponLines);
                        GenericFunctions_1.toSnakeCase(couponLines);
                    }
                    const feeLines = this.getNodeParameter('feeLinesUi', i).feeLinesValues;
                    if (feeLines) {
                        body.fee_lines = feeLines;
                        GenericFunctions_1.setMetadata(feeLines);
                        GenericFunctions_1.toSnakeCase(feeLines);
                    }
                    const lineItems = this.getNodeParameter('lineItemsUi', i).lineItemsValues;
                    if (lineItems) {
                        body.line_items = lineItems;
                        GenericFunctions_1.setMetadata(lineItems);
                        GenericFunctions_1.toSnakeCase(lineItems);
                    }
                    const metadata = this.getNodeParameter('metadataUi', i).metadataValues;
                    if (metadata) {
                        body.meta_data = metadata;
                    }
                    const shippingLines = this.getNodeParameter('shippingLinesUi', i).shippingLinesValues;
                    if (shippingLines) {
                        body.shipping_lines = shippingLines;
                        GenericFunctions_1.setMetadata(shippingLines);
                        GenericFunctions_1.toSnakeCase(shippingLines);
                    }
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'PUT', `/orders/${orderId}`, body);
                }
                if (operation === 'get') {
                    const orderId = this.getNodeParameter('orderId', i);
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'GET', `/orders/${orderId}`, {}, qs);
                }
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    if (options.after) {
                        qs.after = options.after;
                    }
                    if (options.before) {
                        qs.before = options.before;
                    }
                    if (options.category) {
                        qs.category = options.category;
                    }
                    if (options.customer) {
                        qs.customer = parseInt(options.customer, 10);
                    }
                    if (options.decimalPoints) {
                        qs.dp = options.decimalPoints;
                    }
                    if (options.product) {
                        qs.product = parseInt(options.product, 10);
                    }
                    if (options.order) {
                        qs.order = options.order;
                    }
                    if (options.orderBy) {
                        qs.orderby = options.orderBy;
                    }
                    if (options.search) {
                        qs.search = options.search;
                    }
                    if (options.status) {
                        qs.status = options.status;
                    }
                    if (returnAll === true) {
                        responseData = await GenericFunctions_1.woocommerceApiRequestAllItems.call(this, 'GET', '/orders', {}, qs);
                    }
                    else {
                        qs.per_page = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'GET', '/orders', {}, qs);
                    }
                }
                if (operation === 'delete') {
                    const orderId = this.getNodeParameter('orderId', i);
                    responseData = await GenericFunctions_1.woocommerceApiRequest.call(this, 'DELETE', `/orders/${orderId}`, {}, { force: true });
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.WooCommerce = WooCommerce;
//# sourceMappingURL=WooCommerce.node.js.map